/*  jQuery Nice Select - v1.0
    https://github.com/hernansartorio/jquery-nice-select
    Made by Hern√°n Sartorio  */
!(function (e) {
  e.fn.niceSelect = function (t) {
    function s(t) {
      t.after(e('<div></div>').addClass('nice-select').addClass(t.attr('class') || '').addClass(t.attr('disabled') ? 'disabled' : '')
        .attr('tabindex', t.attr('disabled') ? null : '0')
        .html('<span class="current"></span><ul class="list"></ul>')); const s = t.next(); const n = t.find('option'); const i = t.find('option:selected'); s.find('.current').html(i.data('display') || i.text()), n.each(function (t) {
        const n = e(this); const i = n.data('display'); s.find('ul').append(e('<li></li>').attr('data-value', n.val()).attr('data-display', i || null).addClass(`option${n.is(':selected') ? ' selected' : ''}${n.is(':disabled') ? ' disabled' : ''}`)
          .html(n.text()));
      });
    } if (typeof t === 'string') return t == 'update' ? this.each(function () { const t = e(this); const n = e(this).next('.nice-select'); const i = n.hasClass('open'); n.length && (n.remove(), s(t), i && t.next().trigger('click')); }) : t == 'destroy' ? (this.each(function () { const t = e(this); const s = e(this).next('.nice-select'); s.length && (s.remove(), t.css('display', '')); }), e('.nice-select').length == 0 && e(document).off('.nice_select')) : console.log(`Method "${t}" does not exist.`), this; this.hide(), this.each(function () { const t = e(this); t.next().hasClass('nice-select') || s(t); }), e(document).off('.nice_select'), e(document).on('click.nice_select', '.nice-select', function (t) { const s = e(this); e('.nice-select').not(s).removeClass('open'), s.toggleClass('open'), s.hasClass('open') ? (s.find('.option'), s.find('.focus').removeClass('focus'), s.find('.selected').addClass('focus')) : s.focus(); }), e(document).on('click.nice_select', (t) => { e(t.target).closest('.nice-select').length === 0 && e('.nice-select').removeClass('open').find('.option'); }), e(document).on('click.nice_select', '.nice-select .option:not(.disabled)', function (t) { const s = e(this); const n = s.closest('.nice-select'); n.find('.selected').removeClass('selected'), s.addClass('selected'); const i = s.data('display') || s.text(); n.find('.current').text(i), n.prev('select').val(s.data('value')).trigger('change'); }), e(document).on('keydown.nice_select', '.nice-select', function (t) { const s = e(this); const n = e(s.find('.focus') || s.find('.list .option.selected')); if (t.keyCode == 32 || t.keyCode == 13) return s.hasClass('open') ? n.trigger('click') : s.trigger('click'), !1; if (t.keyCode == 40) { if (s.hasClass('open')) { const i = n.nextAll('.option:not(.disabled)').first(); i.length > 0 && (s.find('.focus').removeClass('focus'), i.addClass('focus')); } else s.trigger('click'); return !1; } if (t.keyCode == 38) { if (s.hasClass('open')) { const l = n.prevAll('.option:not(.disabled)').first(); l.length > 0 && (s.find('.focus').removeClass('focus'), l.addClass('focus')); } else s.trigger('click'); return !1; } if (t.keyCode == 27)s.hasClass('open') && s.trigger('click'); else if (t.keyCode == 9 && s.hasClass('open')) return !1; }); const n = document.createElement('a').style; return n.cssText = 'pointer-events:auto', n.pointerEvents !== 'auto' && e('html').addClass('no-csspointerevents'), this;
  };
}(jQuery));
