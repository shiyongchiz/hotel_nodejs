!(function (a) { typeof define === 'function' && define.amd ? define(['jquery'], a) : typeof module === 'object' && module.exports ? module.exports = a(require('jquery')) : a(jQuery); }((a) => {
  function b(a) { this.init.apply(this, arguments); } let c = 0; const d = a('html'); const e = a(document); const f = a(window); return b.defaults = {
    elementClass: '', elementLoadingClass: 'slbLoading', htmlClass: 'slbActive', closeBtnClass: '', nextBtnClass: '', prevBtnClass: '', loadingTextClass: '', closeBtnCaption: 'Close', nextBtnCaption: 'Next', prevBtnCaption: 'Previous', loadingCaption: 'Loading...', bindToItems: !0, closeOnOverlayClick: !0, closeOnEscapeKey: !0, nextOnImageClick: !0, showCaptions: !0, captionAttribute: 'title', urlAttribute: 'href', startAt: 0, loadingTimeout: 100, appendTarget: 'body', beforeSetContent: null, beforeClose: null, beforeDestroy: null, videoRegex: new RegExp(/youtube.com|vimeo.com/),
  }, a.extend(b.prototype, {
    init(d) { this.options = a.extend({}, b.defaults, d), this.ens = `.slb${++c}`, this.items = [], this.captions = []; const e = this; this.options.$items ? (this.$items = this.options.$items, this.$items.each(function () { const b = a(this); e.items.push(b.attr(e.options.urlAttribute)), e.captions.push(b.attr(e.options.captionAttribute)); }), this.options.bindToItems && this.$items.on(`click${this.ens}`, (b) => { b.preventDefault(), e.showPosition(e.$items.index(a(b.currentTarget))); })) : this.options.items && (this.items = this.options.items), this.options.captions && (this.captions = this.options.captions); }, next() { return this.showPosition(this.currentPosition + 1); }, prev() { return this.showPosition(this.currentPosition - 1); }, normalizePosition(a) { return a >= this.items.length ? a = 0 : a < 0 && (a = this.items.length - 1), a; }, showPosition(a) { return this.currentPosition = this.normalizePosition(a), this.setupLightboxHtml().prepareItem(this.currentPosition, this.setContent).show(); }, loading(a) { const b = this; a ? this.loadingTimeout = setTimeout(() => { b.$el.addClass(b.options.elementLoadingClass), b.$content.html(`<p class="slbLoadingText ${b.options.loadingTextClass}">${b.options.loadingCaption}</p>`), b.show(); }, this.options.loadingTimeout) : (this.$el && this.$el.removeClass(this.options.elementLoadingClass), clearTimeout(this.loadingTimeout)); }, prepareItem(b, c) { const d = this; const e = this.items[b]; if (this.loading(!0), this.options.videoRegex.test(e))c.call(d, a(`<div class="slbIframeCont"><iframe class="slbIframe" frameborder="0" allowfullscreen src="${e}"></iframe></div>`)); else { const f = a(`<div class="slbImageWrap"><img class="slbImage" src="${e}" /></div>`); this.$currentImage = f.find('.slbImage'), this.options.showCaptions && this.captions[b] && f.append(`<div class="slbCaption">${this.captions[b]}</div>`), this.loadImage(e, () => { d.setImageDimensions(), c.call(d, f), d.loadImage(d.items[d.normalizePosition(d.currentPosition + 1)]); }); } return this; }, loadImage(a, b) { if (!this.options.videoRegex.test(a)) { const c = new Image(); b && (c.onload = b), c.src = a; } }, setupLightboxHtml() { const b = this.options; return this.$el || (this.$el = a(`<div class="slbElement ${b.elementClass}"><div class="slbOverlay"></div><div class="slbWrapOuter"><div class="slbWrap"><div class="slbContentOuter"><div class="slbContent"></div><button type="button" title="${b.closeBtnCaption}" class="slbCloseBtn ${b.closeBtnClass}">Ã—</button></div></div></div></div>`), this.items.length > 1 && a(`<div class="slbArrows"><button type="button" title="${b.prevBtnCaption}" class="prev slbArrow${b.prevBtnClass}">${b.prevBtnCaption}</button><button type="button" title="${b.nextBtnCaption}" class="next slbArrow${b.nextBtnClass}">${b.nextBtnCaption}</button></div>`).appendTo(this.$el.find('.slbContentOuter')), this.$content = this.$el.find('.slbContent')), this.$content.empty(), this; }, show() { return this.modalInDom || (this.$el.appendTo(a(this.options.appendTarget)), d.addClass(this.options.htmlClass), this.setupLightboxEvents(), this.modalInDom = !0), this; }, setContent(b) { const c = a(b); return this.loading(!1), this.setupLightboxHtml(), this.options.beforeSetContent && this.options.beforeSetContent(c, this), this.$content.html(c), this; }, setImageDimensions() { this.$currentImage && this.$currentImage.css('max-height', `${f.height()}px`); }, setupLightboxEvents() { const b = this; this.lightboxEventsSetuped || (this.$el.on(`click${this.ens}`, (c) => { const d = a(c.target); d.is('.slbCloseBtn') || b.options.closeOnOverlayClick && d.is('.slbWrap') ? b.close() : d.is('.slbArrow') ? d.hasClass('next') ? b.next() : b.prev() : b.options.nextOnImageClick && b.items.length > 1 && d.is('.slbImage') && b.next(); }), e.on(`keyup${this.ens}`, (a) => { b.options.closeOnEscapeKey && a.keyCode === 27 && b.close(), b.items.length > 1 && ((a.keyCode === 39 || a.keyCode === 68) && b.next(), (a.keyCode === 37 || a.keyCode === 65) && b.prev()); }), f.on(`resize${this.ens}`, () => { b.setImageDimensions(); }), this.lightboxEventsSetuped = !0); }, close() { this.modalInDom && (this.options.beforeClose && this.options.beforeClose(this), this.$el && this.$el.off(this.ens), e.off(this.ens), f.off(this.ens), this.lightboxEventsSetuped = !1, this.$el.detach(), d.removeClass(this.options.htmlClass), this.modalInDom = !1); }, destroy() { this.close(), this.options.beforeDestroy && this.options.beforeDestroy(this), this.$items && this.$items.off(this.ens), this.$el && this.$el.remove(); },
  }), b.open = function (a) { const c = new b(a); return a.content ? c.setContent(a.content).show() : c.showPosition(c.options.startAt); }, a.fn.simpleLightbox = function (c) { let d; const e = this; return this.each(function () { a.data(this, 'simpleLightbox') || (d = d || new b(a.extend({}, c, { $items: e })), a.data(this, 'simpleLightbox', d)); }); }, a.simpleLightbox = a.SimpleLightbox = b, a;
}));
